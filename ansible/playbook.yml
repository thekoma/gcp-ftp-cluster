---
- name: "Configure host"
  hosts: 127.0.0.1
  connection: local
  become: yes

  vars:
    workdir: "/opt/sftpgo"
    image: "drakkan/sftpgo:edge-alpine"

  handlers:
    - name: reload-sftpgo
      shell: |
        docker-compose -f {{ workdir }}/docker-compose.yaml restart

  tasks:
    - name: Ensure this playbook is updated costantly (also as first step so that we can retry)
      tags: [ "always" ]
      ansible.builtin.cron:
        name: "Update confs"
        minute: "*/5"
        hour: "*"
        job: "sh -c /opt/rerun.sh >/dev/null"
        user: root

    - name: Update the reconfiguration script
      tags: [ "always" ]
      ansible.builtin.template:
        src: runme.sh.j2
        dest: "/opt/rerun.sh"
        owner: '0'
        group: '0'
        mode: '0755'

    - name: Check if {{ workdir}} exists
      tags: [ "always" ]
      stat:
        path: "{{ workdir}}"
      register: register_name

    - name: "Install utils"
      when: not register_name.stat.exists
      tags: [ "always" ]  
      apt:
        update_cache: yes
        cache_valid_time: 3600
        pkg:
        - python3-pymysql
        - htop
        - ncdu
        - wget
        - jq
        - docker
        - docker-compose
        - expect
        - nfs-common
        - mariadb-client
        - python3-passlib
        - python3-bcrypt

    - name: Create needed directory
      tags: [ "always" ]
      loop:
        - "{{workdir}}"
        - "{{workdir}}/home"
        - "{{workdir}}/data"
        - "{{workdir}}/nfs"
      ansible.builtin.file:
        path: "{{item}}"
        state: directory
        mode: '0755'
        owner: '1000'
        group: '1000'



    - name: gather LB ip
      tags: [ "ftp" ]
      shell: gcloud compute forwarding-rules describe ftp-ip --region=us-central1 --format=json |jq -r '.IPAddress'
      register: lb

    - name: gather LB ip
      tags: [ "bastion" ]
      shell: curl ipinfo.io/ip
      register: lb
      args:
        warn: false

    - name: gather sqluser
      tags: [ "always" ]
      shell: gcloud secrets versions access  latest --secret="sqlusername"
      register: sqluser

    - name: gather sqlppass
      tags: [ "always" ]
      shell: gcloud secrets versions access  latest --secret="sqlppass"
      register: sqlppass

    - name: gather sqlhost
      tags: [ "always" ]
      shell: gcloud secrets versions access  latest --secret="sqlhost"
      register: sqlhost

    - name: gather cookie key
      tags: [ "always" ]
      shell: gcloud secrets versions access  latest --secret="cookie_key"
      register: cookie_key

    - name: gather nfs_server_mount
      tags: [ "always" ]
      shell: gcloud secrets versions access  latest --secret="nfs_server_mount"
      register: nfs_server_mount

    - name: gather nfs_server
      tags: [ "always" ]
      shell: gcloud secrets versions access  latest --secret="nfs_server"
      register: nfs_server

    - name: gather ftp_demo_user
      tags: [ "bastion" ]
      shell: gcloud secrets versions access  latest --secret="ftp_demo_user"
      register: ftp_demo_user

    - name: gather ftp_demo_password
      tags: [ "bastion" ]
      shell: gcloud secrets versions access  latest --secret="ftp_demo_password"
      register: ftp_demo_password

    - name: gather ftp_demo_pubkey
      tags: [ "bastion" ]
      shell: gcloud secrets versions access  latest --secret="ftp_demo_pubkey"
      register: ftp_demo_pubkey

    - name: gather ftp_webadmin_user
      tags: [ "bastion" ]
      shell: gcloud secrets versions access  latest --secret="ftp_webadmin_user"
      register: ftp_webadmin_user

    - name: gather ftp_webadmin_password
      tags: [ "bastion" ]
      shell: gcloud secrets versions access  latest --secret="ftp_webadmin_password"
      register: ftp_webadmin_password

    - name: gather bucket_id
      tags: [ "bastion" ]
      shell: gcloud secrets versions access  latest --secret="bucket_id"|sed 's#gs://##g'
      register: bucket_id

    - name: Update the configuration
      tags: [ "always" ]
      notify:
        - 'reload-sftpgo'
      ansible.builtin.template:
        src: sftpgo.json.j2
        dest: "{{workdir}}/sftpgo.json"
        mode: '0644'
        owner: '1000'
        group: '1000'

    - name: Init
      notify:
        - 'reload-sftpgo'
      tags: [ "bastion" ]
      ansible.builtin.template:
        src: sftp-init.json.j2
        dest: "{{workdir}}/sftp-init.json"
        owner: '1000'
        group: '1000'
        mode: '0640'

    - name: Init
      tags: [ "ftp" ]
      copy:
        content: ""
        dest: "{{workdir}}/sftp-init.json"
        owner: '1000'
        group: '1000'
        mode: '0640'

    - name: Wait until the DB is initialized.
      until: tables.query_result[0]|length > 5
      retries: 500
      delay: 10
      tags: [ "ftp" ]
      register: tables
      community.mysql.mysql_query:
          login_user: "{{sqluser.stdout}}"
          login_password: "{{sqlppass.stdout}}"
          login_host:  "{{sqlhost.stdout}}"
          login_db: "ftp"
          query: |
            show tables;

    # Comment
    - name: Mount NFS volume
      tags: [ "always" ]
      ansible.posix.mount:
        src: "{{nfs_server.stdout}}:/{{nfs_server_mount.stdout}}"
        path: "{{workdir}}/nfs"
        opts: hard,timeo=600,retrans=3,rsize=1048576,wsize=1048576,resvport,async
        state: mounted
        fstype: nfs

    - name: Create Demo File
      tags: [ "always" ]
      ansible.builtin.copy:
        content: 'Hi! This file exists because the NFS Share is working!'
        dest: "{{workdir}}/nfs/README.txt"
        owner: '1000'
        group: '1000'

    - name: Create needed directory
      tags: [ "always" ]
      loop:
        - "{{workdir}}/nfs"
      ansible.builtin.file:
        recurse: true
        path: "{{item}}"
        state: directory
        owner: '1000'
        group: '1000'

    - name: Update the configuration
      tags: [ "always" ]
      notify:
        - 'reload-sftpgo'
      ansible.builtin.template:
        src: docker-compose.yaml.j2
        dest: "{{workdir}}/docker-compose.yaml"
        owner: '1000'
        group: '1000'
        mode: '0640'

    - name: start-update docker
      tags: [ "always" ]
      shell: |
        docker-compose -f {{ workdir }}/docker-compose.yaml up -d